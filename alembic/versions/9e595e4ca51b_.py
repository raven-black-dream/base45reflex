"""empty message

Revision ID: 9e595e4ca51b
Revises: 
Create Date: 2023-09-08 14:48:29.364959

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '9e595e4ca51b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exercise_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('input_features',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('reps', sa.Integer(), nullable=False),
    sa.Column('reps_max', sa.Integer(), nullable=False),
    sa.Column('reps_min', sa.Integer(), nullable=False),
    sa.Column('rpe', sa.Float(), nullable=False),
    sa.Column('set_number', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unit_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('exercises',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('weight_step', sa.Float(), nullable=False),
    sa.Column('type', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['type'], ['exercise_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('programs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('author', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('length_in_weeks', sa.Integer(), nullable=False),
    sa.Column('public', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['author'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unit_conversion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_unit', sa.Integer(), nullable=False),
    sa.Column('second_unit', sa.Integer(), nullable=False),
    sa.Column('factor', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['first_unit'], ['unit_types.id'], ),
    sa.ForeignKeyConstraint(['second_unit'], ['unit_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_clients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('client_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_weight_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('unit', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('predictions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('input_id', sa.Integer(), nullable=False),
    sa.Column('exercise', sa.Integer(), nullable=False),
    sa.Column('model', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('prediction', sa.Integer(), nullable=False),
    sa.Column('user_agrees', sa.Boolean(), nullable=False),
    sa.Column('user_suggestion', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['exercise'], ['exercises.id'], ),
    sa.ForeignKeyConstraint(['input_id'], ['input_features.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('program_days',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('program_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['program_id'], ['programs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_program_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('current', sa.Boolean(), nullable=False),
    sa.Column('program_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['program_id'], ['programs.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('program_history_prediction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_program_history_id', sa.Integer(), nullable=False),
    sa.Column('program_day_id', sa.Integer(), nullable=False),
    sa.Column('exercise_id', sa.Integer(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['program_day_id'], ['program_days.id'], ),
    sa.ForeignKeyConstraint(['user_program_history_id'], ['user_program_history.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('program_sets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('day_id', sa.Integer(), nullable=False),
    sa.Column('exercise_order', sa.Integer(), nullable=False),
    sa.Column('exercise_id', sa.Integer(), nullable=False),
    sa.Column('min_reps', sa.Integer(), nullable=False),
    sa.Column('max_reps', sa.Integer(), nullable=False),
    sa.Column('avg_rpe', sa.Float(), nullable=False),
    sa.Column('num_sets', sa.Integer(), nullable=False),
    sa.Column('myoreps', sa.Boolean(), nullable=False),
    sa.Column('amrap', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['day_id'], ['program_days.id'], ),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workouts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('complete', sa.Boolean(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('deload', sa.Boolean(), nullable=False),
    sa.Column('program_day', sa.Integer(), nullable=True),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['program_day'], ['program_days.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workout_comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workout_id', sa.Integer(), nullable=False),
    sa.Column('comment', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workout_sets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workout_id', sa.Integer(), nullable=False),
    sa.Column('exercise_id', sa.Integer(), nullable=False),
    sa.Column('reps', sa.Integer(), nullable=False),
    sa.Column('avg_rpe', sa.Float(), nullable=False),
    sa.Column('num_sets', sa.Integer(), nullable=False),
    sa.Column('set_order', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_workout_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('set_id', sa.Integer(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('exercise', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('metric', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['set_id'], ['workout_sets.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['unit_types.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_workout_metrics')
    op.drop_table('workout_sets')
    op.drop_table('workout_comments')
    op.drop_table('workouts')
    op.drop_table('program_sets')
    op.drop_table('program_history_prediction')
    op.drop_table('user_program_history')
    op.drop_table('program_days')
    op.drop_table('predictions')
    op.drop_table('user_weight_history')
    op.drop_table('user_clients')
    op.drop_table('unit_conversion')
    op.drop_table('programs')
    op.drop_table('exercises')
    op.drop_table('users')
    op.drop_table('unit_types')
    op.drop_table('input_features')
    op.drop_table('exercise_type')
    # ### end Alembic commands ###
